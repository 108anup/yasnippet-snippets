# -*- mode: snippet -*-
# contributor: sh-ow <sh-ow@users.noreply.github.com>
# name: commentblock
# key: com
# --
${1:$(let* ((col (current-column)) (lastcom (dolist (ch (append (reverse comment-start) nil)) (unless (or (eq ch nil) (eq ch 32)) (return (string ch))))) (str "") (start (substring comment-start 0 (dotimes (i (length comment-start)) (unless (or (eq (aref (reverse comment-start) i) nil) (eq (aref (reverse comment-start) i) 32)) (return (- (length comment-start) i)))))) (end (if (eq (length comment-end) 0) (reverse start) (substring comment-end (dotimes (i (length comment-end)) (unless (or (eq (aref comment-end i) nil) (eq (aref comment-end i) 32)) (return i)))))) (over (- (+ (string-width yas-text) (length start) (length end) col) 77))) (while (< (length str) (+ (- 79 (length start) (length end) col) (if (> over 0) over 0))) (setq str (concat str lastcom))) (concat start str end))}
${1:$(let* ((col (current-column)) (str "") (start (substring comment-start 0 (dotimes (i (length comment-start)) (unless (or (eq (aref (reverse comment-start) i) nil) (eq (aref (reverse comment-start) i) 32)) (return (- (length comment-start) i)))))) (end (if (eq (length comment-end) 0) (reverse start) (substring comment-end (dotimes (i (length comment-end)) (unless (or (eq (aref comment-end i) nil) (eq (aref comment-end i) 32)) (return i))))))) (while (< (length str) (ffloor (/ (- 78.0 (+ col (length start) (string-width yas-text) (length end))) 2.0))) (setq str (concat str " "))) (concat start str))} ${1:comment} ${1:$(let* ((col (current-column)) (str "") (start (substring comment-start 0 (dotimes (i (length comment-start)) (unless (or (eq (aref (reverse comment-start) i) nil) (eq (aref (reverse comment-start) i) 32)) (return (- (length comment-start) i)))))) (end (if (eq (length comment-end) 0) (reverse start) (substring comment-end (dotimes (i (length comment-end)) (unless (or (eq (aref comment-end i) nil) (eq (aref comment-end i) 32)) (return i))))))) (while (< (length str) (- 79.0 (if (eq (mod (string-width yas-text) 2) 1) (- col 1) col) (length end))) (setq str (concat str " "))) (concat str end))}
${1:$(let* ((col (current-column)) (lastcom (dolist (ch (append (reverse comment-start) nil)) (unless (or (eq ch nil) (eq ch 32)) (return (string ch))))) (str "") (start (substring comment-start 0 (dotimes (i (length comment-start)) (unless (or (eq (aref (reverse comment-start) i) nil) (eq (aref (reverse comment-start) i) 32)) (return (- (length comment-start) i)))))) (end (if (eq (length comment-end) 0) (reverse start) (substring comment-end (dotimes (i (length comment-end)) (unless (or (eq (aref comment-end i) nil) (eq (aref comment-end i) 32)) (return i)))))) (over (- (+ (string-width yas-text) (length start) (length end) col) 77))) (while (< (length str) (+ (- 79 (length start) (length end) col) (if (> over 0) over 0))) (setq str (concat str lastcom))) (concat start str end))}
$0
